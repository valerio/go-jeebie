name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.23'
  SDL2_VERSION: '2.30.9'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-go-mod-
    
    - name: Cache Go build
      uses: actions/cache@v3
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
        restore-keys: ${{ runner.os }}-go-build-
    
    - name: Go mod download
      run: go mod download
    
    - name: Go vet
      run: go vet ./...
    
    - name: Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build
      run: make build
    
    - name: Run tests
      run: make test
    
    - name: Run Blargg tests
      run: make test-blargg

  sdl2-build:
    if: |
      contains(github.event.head_commit.message, '[sdl2]') ||
      contains(github.event.head_commit.message, '[ci-full]') ||
      contains(github.ref, 'ci-sdl2') ||
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'msys2 {0}' || 'bash' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-go-mod-
    
    - name: Cache Go build
      uses: actions/cache@v3
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-go-build-
          ${{ runner.os }}-go-build-sdl2-
    
    - name: Cache SDL2 Ubuntu packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ubuntu-sdl2-${{ env.SDL2_VERSION }}
        restore-keys: ubuntu-sdl2-
    
    - name: Install SDL2 dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install -y libsdl2-dev
    
    - name: Install SDL2 dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sdl2
    
    - name: Set up MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-pkg-config
    
    - name: Go mod download
      run: go mod download
    
    - name: Build SDL2 variant
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          export CGO_CFLAGS="$(pkg-config --cflags sdl2) -D_REENTRANT"
          export CGO_LDFLAGS="$(pkg-config --libs sdl2)"
        fi
        go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Run core tests
      run: go test -tags sdl2 ./jeebie/...