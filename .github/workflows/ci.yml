name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.23'
  SDL2_VERSION: '2.30.9'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Go mod download
      run: go mod download
    
    - name: Go vet
      run: go vet ./...
    
    - name: Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build
      run: make build
    
    - name: Run tests
      run: make test
    
    - name: Run Blargg tests
      run: make test-blargg

  sdl2-build:
    if: |
      contains(github.event.head_commit.message, '[sdl2]') ||
      contains(github.event.head_commit.message, '[ci-full]') ||
      contains(github.ref, 'ci-sdl2') ||
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Verify Go cache setup
      run: |
        echo "=== System info ==="
        nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo "CPU count unknown"
        echo "=== Go cache paths ==="
        go env GOCACHE GOMODCACHE
        echo "=== Cache directories ==="
        ls -la $(go env GOCACHE) 2>/dev/null | head -5 || echo "Build cache empty"
        ls -la $(go env GOMODCACHE) 2>/dev/null | head -5 || echo "Module cache empty"
    
    - name: Install SDL2 dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "=== Checking what will be installed ==="
        sudo apt update
        apt-cache depends libsdl2-dev
        echo "=== Installing SDL2 ==="
        time sudo apt install -y libsdl2-dev
    
    - name: Install SDL2 dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sdl2
    
    - name: Set up MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-go
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-pkg-config
    
    - name: Go mod download (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: go mod download
      
    - name: Go mod download (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Go environment ==="
        go env GOCACHE GOMODCACHE
        echo "=== Module download ==="
        time go mod download
    
    - name: Build SDL2 variant (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export CGO_CFLAGS="$(pkg-config --cflags sdl2) -D_REENTRANT"
        export CGO_LDFLAGS="$(pkg-config --libs sdl2)"
        go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Build SDL2 variant (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Build cache status ==="
        ls -la ~/.cache/go-build/ 2>/dev/null | head -10 || echo "No build cache found"
        echo "=== Module cache status ==="
        ls -la ~/go/pkg/mod/ 2>/dev/null | head -10 || echo "No module cache found"
        echo "=== Building without SDL2 (for comparison) ==="
        time go build -v -o bin/jeebie-nosldl2 ./cmd/jeebie
        echo "=== Building with SDL2 ==="
        time go build -v -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Run core tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export CGO_CFLAGS="$(pkg-config --cflags sdl2) -D_REENTRANT"
        export CGO_LDFLAGS="$(pkg-config --libs sdl2)"
        go test -tags sdl2 ./jeebie/...
    
    - name: Run core tests (Unix)
      if: matrix.os != 'windows-latest'
      run: go test -tags sdl2 ./jeebie/...