name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.23'
  SDL2_VERSION: '2.30.9'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Go mod download
      run: go mod download
    
    - name: Go vet
      run: go vet ./...
    
    - name: Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build
      run: make build
    
    - name: Run tests
      run: make test
    
    - name: Run Blargg tests
      run: make test-blargg

  sdl2-build:
    if: |
      contains(github.event.head_commit.message, '[sdl2]') ||
      contains(github.event.head_commit.message, '[ci-full]') ||
      contains(github.ref, 'ci-sdl2') ||
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Set up MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-pkg-config
    
    - name: Cache CGO build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-cgo-${{ hashFiles('**/go.sum') }}-${{ env.SDL2_VERSION }}-v2
        restore-keys: |
          ${{ runner.os }}-cgo-${{ hashFiles('**/go.sum') }}-${{ env.SDL2_VERSION }}-
          ${{ runner.os }}-cgo-${{ hashFiles('**/go.sum') }}-
        
    - name: Verify Go cache setup (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: go env GOCACHE GOMODCACHE
        
    - name: Verify Go cache setup (Unix)
      if: matrix.os != 'windows-latest'
      run: go env GOCACHE GOMODCACHE
    
    - name: Install SDL2 dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update -qq
        sudo apt install -y libsdl2-dev libsdl2-2.0-0
    
    - name: Install SDL2 dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sdl2
    
    - name: Go mod download (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: go mod download
      
    - name: Go mod download (Unix)
      if: matrix.os != 'windows-latest'
      run: go mod download
    
    - name: Build SDL2 variant (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export CGO_CFLAGS="$(pkg-config --cflags sdl2) -D_REENTRANT"
        export CGO_LDFLAGS="$(pkg-config --libs sdl2)"
        go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Build SDL2 variant (Ubuntu - Static)
      if: matrix.os == 'ubuntu-latest'
      env:
        GOMAXPROCS: 4
        CGO_ENABLED: 1
        CGO_LDFLAGS: "-static-libgcc"
      run: |
        go build -tags "sdl2 static" -ldflags "-s -w -extldflags '-static'" -o bin/jeebie ./cmd/jeebie
        
    - name: Build SDL2 variant (macOS - Dynamic)
      if: matrix.os == 'macos-latest'
      env:
        GOMAXPROCS: 4
        CGO_ENABLED: 1
      run: |
        go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Run core tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export CGO_CFLAGS="$(pkg-config --cflags sdl2) -D_REENTRANT"
        export CGO_LDFLAGS="$(pkg-config --libs sdl2)"
        go test -tags sdl2 ./jeebie/...
    
    - name: Run core tests (Ubuntu - Static)
      if: matrix.os == 'ubuntu-latest'
      run: go test -tags "sdl2 static" ./jeebie/...
      
    - name: Run core tests (macOS - Dynamic)
      if: matrix.os == 'macos-latest'
      run: go test -tags sdl2 ./jeebie/...