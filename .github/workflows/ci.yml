name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.23'
  SDL2_VERSION: '2.30.9'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Go mod download
      run: go mod download
    
    - name: Go vet
      run: go vet ./...
    
    - name: Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build
      run: make build
    
    - name: Run tests
      run: make test
    
    - name: Run Blargg tests
      run: make test-blargg

  sdl2-build:
    if: |
      contains(github.event.head_commit.message, '[sdl2]') ||
      contains(github.event.head_commit.message, '[ci-full]') ||
      contains(github.ref, 'ci-sdl2') ||
      github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Install SDL2 (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "https://github.com/libsdl-org/SDL/releases/download/release-2.30.9/SDL2-devel-2.30.9-mingw.tar.gz" -OutFile "SDL2-devel.tar.gz"
        tar -xzf SDL2-devel.tar.gz
        echo "SDL2_PATH=$PWD/SDL2-2.30.9" >> $env:GITHUB_ENV
    
    - name: Cache CGO build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-cgo-${{ hashFiles('**/go.sum') }}-${{ env.SDL2_VERSION }}
        restore-keys: |
          ${{ runner.os }}-cgo-${{ hashFiles('**/go.sum') }}-
          ${{ runner.os }}-cgo-
        
    - name: Install TDM-GCC (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "https://github.com/jmeubank/tdm-gcc/releases/download/v10.3.0-tdm64-2/tdm64-gcc-10.3.0-2.exe" -OutFile "tdm-gcc.exe"
        Start-Process -FilePath "tdm-gcc.exe" -ArgumentList "/S" -Wait
        echo "C:\TDM-GCC-64\bin" >> $env:GITHUB_PATH
        
    - name: Verify Go cache setup (Unix)
      if: matrix.os != 'windows-latest'
      run: go env GOCACHE GOMODCACHE
    
    - name: Install SDL2 dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update -qq
        sudo apt install -y libsdl2-dev
    
    - name: Install SDL2 dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install sdl2
    
    - name: Go mod download (Windows)
      if: matrix.os == 'windows-latest'
      run: go mod download
      
    - name: Go mod download (Unix)
      if: matrix.os != 'windows-latest'
      run: go mod download
    
    - name: Build SDL2 variant (Windows)
      if: matrix.os == 'windows-latest'
      env:
        CGO_ENABLED: 1
        CC: gcc
        CGO_CFLAGS: "-I${{ env.SDL2_PATH }}/x86_64-w64-mingw32/include/SDL2 -D_REENTRANT"
        CGO_LDFLAGS: "-L${{ env.SDL2_PATH }}/x86_64-w64-mingw32/lib -lSDL2main -lSDL2 -static-libgcc"
      run: go build -tags sdl2 -ldflags "-H windowsgui" -o bin/jeebie.exe ./cmd/jeebie
    
    - name: Build SDL2 variant (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
        
    - name: Build SDL2 variant (macOS)
      if: matrix.os == 'macos-latest'
      run: go build -tags sdl2 -o bin/jeebie ./cmd/jeebie
    
    - name: Run core tests (Windows)
      if: matrix.os == 'windows-latest'
      env:
        CGO_ENABLED: 1
        CC: gcc
        CGO_CFLAGS: "-I${{ env.SDL2_PATH }}/x86_64-w64-mingw32/include/SDL2 -D_REENTRANT"
        CGO_LDFLAGS: "-L${{ env.SDL2_PATH }}/x86_64-w64-mingw32/lib -lSDL2main -lSDL2 -static-libgcc"
      run: go test -tags sdl2 ./jeebie/...
    
    - name: Run core tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: go test -tags sdl2 ./jeebie/...
      
    - name: Run core tests (macOS)
      if: matrix.os == 'macos-latest'
      run: go test -tags sdl2 ./jeebie/...