//go:build sdl2

package sdl2

import "github.com/veandco/go-sdl2/sdl"

// Global rect reused for all text rendering, reduces allocations
var textRenderRect = sdl.Rect{}

// Simple bitmap font for debug text (5x7 pixel characters)
var fontData = map[rune][7]uint8{
	'A': {0x70, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88},
	'B': {0xF0, 0x88, 0x88, 0xF0, 0x88, 0x88, 0xF0},
	'C': {0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70},
	'D': {0xF0, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF0},
	'E': {0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8},
	'F': {0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80},
	'G': {0x70, 0x88, 0x80, 0xB8, 0x88, 0x88, 0x70},
	'H': {0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88},
	'I': {0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70},
	'J': {0x38, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60},
	'K': {0x88, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x88},
	'L': {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8},
	'M': {0x88, 0xD8, 0xA8, 0x88, 0x88, 0x88, 0x88},
	'N': {0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88, 0x88},
	'O': {0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70},
	'P': {0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80},
	'Q': {0x70, 0x88, 0x88, 0x88, 0xA8, 0x90, 0x68},
	'R': {0xF0, 0x88, 0x88, 0xF0, 0x90, 0x88, 0x88},
	'S': {0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70},
	'T': {0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
	'U': {0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70},
	'V': {0x88, 0x88, 0x88, 0x88, 0x50, 0x50, 0x20},
	'W': {0x88, 0x88, 0x88, 0xA8, 0xA8, 0xD8, 0x88},
	'X': {0x88, 0x50, 0x20, 0x20, 0x50, 0x88, 0x88},
	'Y': {0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20},
	'Z': {0xF8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8},
	'a': {0x00, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78},
	'b': {0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0xF0},
	'c': {0x00, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70},
	'd': {0x08, 0x08, 0x78, 0x88, 0x88, 0x88, 0x78},
	'e': {0x00, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x70},
	'f': {0x30, 0x48, 0x40, 0xF0, 0x40, 0x40, 0x40},
	'g': {0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x70},
	'h': {0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x88},
	'i': {0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70},
	'j': {0x10, 0x00, 0x30, 0x10, 0x10, 0x90, 0x60},
	'k': {0x80, 0x80, 0x88, 0x90, 0xE0, 0x90, 0x88},
	'l': {0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70},
	'm': {0x00, 0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0xA8},
	'n': {0x00, 0x00, 0xF0, 0x88, 0x88, 0x88, 0x88},
	'o': {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70},
	'p': {0x00, 0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80},
	'q': {0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x08},
	'r': {0x00, 0x00, 0xB8, 0xC8, 0x80, 0x80, 0x80},
	's': {0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0xF0},
	't': {0x40, 0x40, 0xF0, 0x40, 0x40, 0x48, 0x30},
	'u': {0x00, 0x00, 0x88, 0x88, 0x88, 0x88, 0x78},
	'v': {0x00, 0x00, 0x88, 0x88, 0x50, 0x50, 0x20},
	'w': {0x00, 0x00, 0x88, 0xA8, 0xA8, 0xA8, 0x50},
	'x': {0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88},
	'y': {0x00, 0x00, 0x88, 0x88, 0x78, 0x08, 0x70},
	'z': {0x00, 0x00, 0xF8, 0x10, 0x20, 0x40, 0xF8},
	'0': {0x70, 0x88, 0x98, 0xA8, 0xC8, 0x88, 0x70},
	'1': {0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70},
	'2': {0x70, 0x88, 0x08, 0x30, 0x40, 0x80, 0xF8},
	'3': {0x70, 0x88, 0x08, 0x30, 0x08, 0x88, 0x70},
	'4': {0x10, 0x30, 0x50, 0x90, 0xF8, 0x10, 0x10},
	'5': {0xF8, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70},
	'6': {0x30, 0x40, 0x80, 0xF0, 0x88, 0x88, 0x70},
	'7': {0xF8, 0x08, 0x10, 0x20, 0x40, 0x40, 0x40},
	'8': {0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70},
	'9': {0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0x60},
	' ': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	'/': {0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80},
	'-': {0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00},
	'.': {0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60},
	':': {0x00, 0x60, 0x60, 0x00, 0x60, 0x60, 0x00},
}

func DrawText(renderer *sdl.Renderer, text string, x, y int32, scale int32, r, g, b uint8) {
	if scale < 1 {
		scale = 1
	}

	currentX := x
	for _, ch := range text {
		DrawChar(renderer, ch, currentX, y, scale, r, g, b)
		currentX += 6 * scale // 5 pixels + 1 space
	}
}

func DrawChar(renderer *sdl.Renderer, ch rune, x, y int32, scale int32, r, g, b uint8) {
	bitmap, exists := fontData[ch]
	if !exists {
		return
	}

	renderer.SetDrawColor(r, g, b, 255)
	textRenderRect.W = scale
	textRenderRect.H = scale

	for row := 0; row < 7; row++ {
		bits := bitmap[row]
		for col := 0; col < 5; col++ {
			if bits&(0x80>>col) != 0 {
				textRenderRect.X = x + int32(col)*scale
				textRenderRect.Y = y + int32(row)*scale
				renderer.FillRect(&textRenderRect)
			}
		}
	}
}
